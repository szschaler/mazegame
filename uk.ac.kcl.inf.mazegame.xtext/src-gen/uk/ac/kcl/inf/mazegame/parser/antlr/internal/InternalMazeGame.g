/*
 * generated by Xtext 2.12.0
 */
grammar InternalMazeGame;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.mazegame.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.mazegame.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.mazegame.services.MazeGameGrammarAccess;

}

@parser::members {

 	private MazeGameGrammarAccess grammarAccess;

    public InternalMazeGameParser(TokenStream input, MazeGameGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MazeGame";
   	}

   	@Override
   	protected MazeGameGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMazeGame
entryRuleMazeGame returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMazeGameRule()); }
	iv_ruleMazeGame=ruleMazeGame
	{ $current=$iv_ruleMazeGame.current; }
	EOF;

// Rule MazeGame
ruleMazeGame returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='maze'
		{
			newLeafNode(otherlv_0, grammarAccess.getMazeGameAccess().getMazeKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMazeGameAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMazeGameAccess().getRoomsRoomDefinitionParserRuleCall_2_0());
				}
				lv_rooms_2_0=ruleRoomDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMazeGameRule());
					}
					add(
						$current,
						"rooms",
						lv_rooms_2_0,
						"uk.ac.kcl.inf.mazegame.MazeGame.RoomDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getMazeGameAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleRoomDefinition
entryRuleRoomDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoomDefinitionRule()); }
	iv_ruleRoomDefinition=ruleRoomDefinition
	{ $current=$iv_ruleRoomDefinition.current; }
	EOF;

// Rule RoomDefinition
ruleRoomDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='room'
		{
			newLeafNode(otherlv_0, grammarAccess.getRoomDefinitionAccess().getRoomKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRoomDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoomDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getRoomDefinitionAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoomDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getRoomDefinitionAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRoomDefinitionAccess().getDoorsDoorDefinitionParserRuleCall_4_0());
				}
				lv_doors_4_0=ruleDoorDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoomDefinitionRule());
					}
					add(
						$current,
						"doors",
						lv_doors_4_0,
						"uk.ac.kcl.inf.mazegame.MazeGame.DoorDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getRoomDefinitionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleDoorDefinition
entryRuleDoorDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoorDefinitionRule()); }
	iv_ruleDoorDefinition=ruleDoorDefinition
	{ $current=$iv_ruleDoorDefinition.current; }
	EOF;

// Rule DoorDefinition
ruleDoorDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDoorDefinitionAccess().getDirectionDirectionEnumRuleCall_0_0());
				}
				lv_direction_0_0=ruleDirection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoorDefinitionRule());
					}
					set(
						$current,
						"direction",
						lv_direction_0_0,
						"uk.ac.kcl.inf.mazegame.MazeGame.Direction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getDoorDefinitionAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDoorDefinitionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getDoorDefinitionAccess().getAdjacentRoomRoomDefinitionCrossReference_2_0());
				}
			)
		)
	)
;

// Rule Direction
ruleDirection returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='north'
			{
				$current = grammarAccess.getDirectionAccess().getNORTHEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDirectionAccess().getNORTHEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='east'
			{
				$current = grammarAccess.getDirectionAccess().getEASTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDirectionAccess().getEASTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='south'
			{
				$current = grammarAccess.getDirectionAccess().getSOUTHEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDirectionAccess().getSOUTHEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='west'
			{
				$current = grammarAccess.getDirectionAccess().getWESTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDirectionAccess().getWESTEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
