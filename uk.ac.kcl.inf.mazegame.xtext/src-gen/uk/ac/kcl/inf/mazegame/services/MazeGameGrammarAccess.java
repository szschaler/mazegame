/*
 * generated by Xtext 2.12.0
 */
package uk.ac.kcl.inf.mazegame.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MazeGameGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MazeGameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mazegame.MazeGame.MazeGame");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMazeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRoomsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRoomsRoomDefinitionParserRuleCall_2_0 = (RuleCall)cRoomsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MazeGame:
		//	"maze" "{"
		//	rooms+=RoomDefinition+
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"maze" "{" rooms+=RoomDefinition+ "}"
		public Group getGroup() { return cGroup; }
		
		//"maze"
		public Keyword getMazeKeyword_0() { return cMazeKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//rooms+=RoomDefinition+
		public Assignment getRoomsAssignment_2() { return cRoomsAssignment_2; }
		
		//RoomDefinition
		public RuleCall getRoomsRoomDefinitionParserRuleCall_2_0() { return cRoomsRoomDefinitionParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class RoomDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mazegame.MazeGame.RoomDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDoorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDoorsDoorDefinitionParserRuleCall_4_0 = (RuleCall)cDoorsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RoomDefinition:
		//	"room" name=ID? description=STRING "{"
		//	doors+=DoorDefinition*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"room" name=ID? description=STRING "{" doors+=DoorDefinition* "}"
		public Group getGroup() { return cGroup; }
		
		//"room"
		public Keyword getRoomKeyword_0() { return cRoomKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//doors+=DoorDefinition*
		public Assignment getDoorsAssignment_4() { return cDoorsAssignment_4; }
		
		//DoorDefinition
		public RuleCall getDoorsDoorDefinitionParserRuleCall_4_0() { return cDoorsDoorDefinitionParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DoorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mazegame.MazeGame.DoorDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAdjacentRoomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAdjacentRoomRoomDefinitionCrossReference_2_0 = (CrossReference)cAdjacentRoomAssignment_2.eContents().get(0);
		private final RuleCall cAdjacentRoomRoomDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cAdjacentRoomRoomDefinitionCrossReference_2_0.eContents().get(1);
		
		//DoorDefinition:
		//	direction=Direction ":" adjacentRoom=[RoomDefinition];
		@Override public ParserRule getRule() { return rule; }
		
		//direction=Direction ":" adjacentRoom=[RoomDefinition]
		public Group getGroup() { return cGroup; }
		
		//direction=Direction
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_0_0() { return cDirectionDirectionEnumRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//adjacentRoom=[RoomDefinition]
		public Assignment getAdjacentRoomAssignment_2() { return cAdjacentRoomAssignment_2; }
		
		//[RoomDefinition]
		public CrossReference getAdjacentRoomRoomDefinitionCrossReference_2_0() { return cAdjacentRoomRoomDefinitionCrossReference_2_0; }
		
		//ID
		public RuleCall getAdjacentRoomRoomDefinitionIDTerminalRuleCall_2_0_1() { return cAdjacentRoomRoomDefinitionIDTerminalRuleCall_2_0_1; }
	}
	
	public class DirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mazegame.MazeGame.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNORTHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNORTHNorthKeyword_0_0 = (Keyword)cNORTHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEASTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEASTEastKeyword_1_0 = (Keyword)cEASTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSOUTHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSOUTHSouthKeyword_2_0 = (Keyword)cSOUTHEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWESTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWESTWestKeyword_3_0 = (Keyword)cWESTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Direction:
		//	NORTH="north" | EAST="east" | SOUTH="south" | WEST="west";
		public EnumRule getRule() { return rule; }
		
		//NORTH="north" | EAST="east" | SOUTH="south" | WEST="west"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NORTH="north"
		public EnumLiteralDeclaration getNORTHEnumLiteralDeclaration_0() { return cNORTHEnumLiteralDeclaration_0; }
		
		//"north"
		public Keyword getNORTHNorthKeyword_0_0() { return cNORTHNorthKeyword_0_0; }
		
		//EAST="east"
		public EnumLiteralDeclaration getEASTEnumLiteralDeclaration_1() { return cEASTEnumLiteralDeclaration_1; }
		
		//"east"
		public Keyword getEASTEastKeyword_1_0() { return cEASTEastKeyword_1_0; }
		
		//SOUTH="south"
		public EnumLiteralDeclaration getSOUTHEnumLiteralDeclaration_2() { return cSOUTHEnumLiteralDeclaration_2; }
		
		//"south"
		public Keyword getSOUTHSouthKeyword_2_0() { return cSOUTHSouthKeyword_2_0; }
		
		//WEST="west"
		public EnumLiteralDeclaration getWESTEnumLiteralDeclaration_3() { return cWESTEnumLiteralDeclaration_3; }
		
		//"west"
		public Keyword getWESTWestKeyword_3_0() { return cWESTWestKeyword_3_0; }
	}
	
	private final MazeGameElements pMazeGame;
	private final RoomDefinitionElements pRoomDefinition;
	private final DoorDefinitionElements pDoorDefinition;
	private final DirectionElements eDirection;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MazeGameGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMazeGame = new MazeGameElements();
		this.pRoomDefinition = new RoomDefinitionElements();
		this.pDoorDefinition = new DoorDefinitionElements();
		this.eDirection = new DirectionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.mazegame.MazeGame".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MazeGame:
	//	"maze" "{"
	//	rooms+=RoomDefinition+
	//	"}";
	public MazeGameElements getMazeGameAccess() {
		return pMazeGame;
	}
	
	public ParserRule getMazeGameRule() {
		return getMazeGameAccess().getRule();
	}
	
	//RoomDefinition:
	//	"room" name=ID? description=STRING "{"
	//	doors+=DoorDefinition*
	//	"}";
	public RoomDefinitionElements getRoomDefinitionAccess() {
		return pRoomDefinition;
	}
	
	public ParserRule getRoomDefinitionRule() {
		return getRoomDefinitionAccess().getRule();
	}
	
	//DoorDefinition:
	//	direction=Direction ":" adjacentRoom=[RoomDefinition];
	public DoorDefinitionElements getDoorDefinitionAccess() {
		return pDoorDefinition;
	}
	
	public ParserRule getDoorDefinitionRule() {
		return getDoorDefinitionAccess().getRule();
	}
	
	//enum Direction:
	//	NORTH="north" | EAST="east" | SOUTH="south" | WEST="west";
	public DirectionElements getDirectionAccess() {
		return eDirection;
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
