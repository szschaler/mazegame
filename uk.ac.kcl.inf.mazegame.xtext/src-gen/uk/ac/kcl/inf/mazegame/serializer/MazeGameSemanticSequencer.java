/*
 * generated by Xtext 2.12.0
 */
package uk.ac.kcl.inf.mazegame.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.mazegame.mazeGame.DoorDefinition;
import uk.ac.kcl.inf.mazegame.mazeGame.MazeGame;
import uk.ac.kcl.inf.mazegame.mazeGame.MazeGamePackage;
import uk.ac.kcl.inf.mazegame.mazeGame.RoomDefinition;
import uk.ac.kcl.inf.mazegame.services.MazeGameGrammarAccess;

@SuppressWarnings("all")
public class MazeGameSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MazeGameGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MazeGamePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MazeGamePackage.DOOR_DEFINITION:
				sequence_DoorDefinition(context, (DoorDefinition) semanticObject); 
				return; 
			case MazeGamePackage.MAZE_GAME:
				sequence_MazeGame(context, (MazeGame) semanticObject); 
				return; 
			case MazeGamePackage.ROOM_DEFINITION:
				sequence_RoomDefinition(context, (RoomDefinition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DoorDefinition returns DoorDefinition
	 *
	 * Constraint:
	 *     (direction=Direction adjacentRoom=[RoomDefinition|ID])
	 */
	protected void sequence_DoorDefinition(ISerializationContext context, DoorDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MazeGamePackage.Literals.DOOR_DEFINITION__DIRECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MazeGamePackage.Literals.DOOR_DEFINITION__DIRECTION));
			if (transientValues.isValueTransient(semanticObject, MazeGamePackage.Literals.DOOR_DEFINITION__ADJACENT_ROOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MazeGamePackage.Literals.DOOR_DEFINITION__ADJACENT_ROOM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDoorDefinitionAccess().getDirectionDirectionEnumRuleCall_0_0(), semanticObject.getDirection());
		feeder.accept(grammarAccess.getDoorDefinitionAccess().getAdjacentRoomRoomDefinitionIDTerminalRuleCall_2_0_1(), semanticObject.eGet(MazeGamePackage.Literals.DOOR_DEFINITION__ADJACENT_ROOM, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MazeGame returns MazeGame
	 *
	 * Constraint:
	 *     rooms+=RoomDefinition+
	 */
	protected void sequence_MazeGame(ISerializationContext context, MazeGame semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoomDefinition returns RoomDefinition
	 *
	 * Constraint:
	 *     (name=ID? description=STRING doors+=DoorDefinition*)
	 */
	protected void sequence_RoomDefinition(ISerializationContext context, RoomDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
