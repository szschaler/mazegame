/**
 * generated by Xtext 2.12.0
 */
package uk.ac.kcl.inf.mazegame.mazeGame.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.inf.mazegame.mazeGame.Direction;
import uk.ac.kcl.inf.mazegame.mazeGame.DoorDefinition;
import uk.ac.kcl.inf.mazegame.mazeGame.MazeGamePackage;
import uk.ac.kcl.inf.mazegame.mazeGame.RoomDefinition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Door Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.mazegame.mazeGame.impl.DoorDefinitionImpl#getDirection <em>Direction</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mazegame.mazeGame.impl.DoorDefinitionImpl#getAdjacentRoom <em>Adjacent Room</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DoorDefinitionImpl extends MinimalEObjectImpl.Container implements DoorDefinition
{
  /**
   * The default value of the '{@link #getDirection() <em>Direction</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirection()
   * @generated
   * @ordered
   */
  protected static final Direction DIRECTION_EDEFAULT = Direction.NORTH;

  /**
   * The cached value of the '{@link #getDirection() <em>Direction</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirection()
   * @generated
   * @ordered
   */
  protected Direction direction = DIRECTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getAdjacentRoom() <em>Adjacent Room</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdjacentRoom()
   * @generated
   * @ordered
   */
  protected RoomDefinition adjacentRoom;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DoorDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MazeGamePackage.Literals.DOOR_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Direction getDirection()
  {
    return direction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDirection(Direction newDirection)
  {
    Direction oldDirection = direction;
    direction = newDirection == null ? DIRECTION_EDEFAULT : newDirection;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MazeGamePackage.DOOR_DEFINITION__DIRECTION, oldDirection, direction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RoomDefinition getAdjacentRoom()
  {
    if (adjacentRoom != null && adjacentRoom.eIsProxy())
    {
      InternalEObject oldAdjacentRoom = (InternalEObject)adjacentRoom;
      adjacentRoom = (RoomDefinition)eResolveProxy(oldAdjacentRoom);
      if (adjacentRoom != oldAdjacentRoom)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MazeGamePackage.DOOR_DEFINITION__ADJACENT_ROOM, oldAdjacentRoom, adjacentRoom));
      }
    }
    return adjacentRoom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RoomDefinition basicGetAdjacentRoom()
  {
    return adjacentRoom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAdjacentRoom(RoomDefinition newAdjacentRoom)
  {
    RoomDefinition oldAdjacentRoom = adjacentRoom;
    adjacentRoom = newAdjacentRoom;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MazeGamePackage.DOOR_DEFINITION__ADJACENT_ROOM, oldAdjacentRoom, adjacentRoom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MazeGamePackage.DOOR_DEFINITION__DIRECTION:
        return getDirection();
      case MazeGamePackage.DOOR_DEFINITION__ADJACENT_ROOM:
        if (resolve) return getAdjacentRoom();
        return basicGetAdjacentRoom();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MazeGamePackage.DOOR_DEFINITION__DIRECTION:
        setDirection((Direction)newValue);
        return;
      case MazeGamePackage.DOOR_DEFINITION__ADJACENT_ROOM:
        setAdjacentRoom((RoomDefinition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MazeGamePackage.DOOR_DEFINITION__DIRECTION:
        setDirection(DIRECTION_EDEFAULT);
        return;
      case MazeGamePackage.DOOR_DEFINITION__ADJACENT_ROOM:
        setAdjacentRoom((RoomDefinition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MazeGamePackage.DOOR_DEFINITION__DIRECTION:
        return direction != DIRECTION_EDEFAULT;
      case MazeGamePackage.DOOR_DEFINITION__ADJACENT_ROOM:
        return adjacentRoom != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (direction: ");
    result.append(direction);
    result.append(')');
    return result.toString();
  }

} //DoorDefinitionImpl
