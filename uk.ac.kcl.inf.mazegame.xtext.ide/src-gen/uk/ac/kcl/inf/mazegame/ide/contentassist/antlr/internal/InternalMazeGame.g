/*
 * generated by Xtext 2.12.0
 */
grammar InternalMazeGame;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.inf.mazegame.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.mazegame.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.inf.mazegame.services.MazeGameGrammarAccess;

}
@parser::members {
	private MazeGameGrammarAccess grammarAccess;

	public void setGrammarAccess(MazeGameGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMazeGame
entryRuleMazeGame
:
{ before(grammarAccess.getMazeGameRule()); }
	 ruleMazeGame
{ after(grammarAccess.getMazeGameRule()); } 
	 EOF 
;

// Rule MazeGame
ruleMazeGame 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMazeGameAccess().getGroup()); }
		(rule__MazeGame__Group__0)
		{ after(grammarAccess.getMazeGameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRoomDefinition
entryRuleRoomDefinition
:
{ before(grammarAccess.getRoomDefinitionRule()); }
	 ruleRoomDefinition
{ after(grammarAccess.getRoomDefinitionRule()); } 
	 EOF 
;

// Rule RoomDefinition
ruleRoomDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRoomDefinitionAccess().getGroup()); }
		(rule__RoomDefinition__Group__0)
		{ after(grammarAccess.getRoomDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDoorDefinition
entryRuleDoorDefinition
:
{ before(grammarAccess.getDoorDefinitionRule()); }
	 ruleDoorDefinition
{ after(grammarAccess.getDoorDefinitionRule()); } 
	 EOF 
;

// Rule DoorDefinition
ruleDoorDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoorDefinitionAccess().getGroup()); }
		(rule__DoorDefinition__Group__0)
		{ after(grammarAccess.getDoorDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Direction
ruleDirection
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectionAccess().getAlternatives()); }
		(rule__Direction__Alternatives)
		{ after(grammarAccess.getDirectionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Direction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectionAccess().getNORTHEnumLiteralDeclaration_0()); }
		('north')
		{ after(grammarAccess.getDirectionAccess().getNORTHEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionAccess().getEASTEnumLiteralDeclaration_1()); }
		('east')
		{ after(grammarAccess.getDirectionAccess().getEASTEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionAccess().getSOUTHEnumLiteralDeclaration_2()); }
		('south')
		{ after(grammarAccess.getDirectionAccess().getSOUTHEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionAccess().getWESTEnumLiteralDeclaration_3()); }
		('west')
		{ after(grammarAccess.getDirectionAccess().getWESTEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MazeGame__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MazeGame__Group__0__Impl
	rule__MazeGame__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MazeGame__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMazeGameAccess().getMazeKeyword_0()); }
	'maze'
	{ after(grammarAccess.getMazeGameAccess().getMazeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MazeGame__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MazeGame__Group__1__Impl
	rule__MazeGame__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MazeGame__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMazeGameAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getMazeGameAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MazeGame__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MazeGame__Group__2__Impl
	rule__MazeGame__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MazeGame__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMazeGameAccess().getRoomsAssignment_2()); }
		(rule__MazeGame__RoomsAssignment_2)
		{ after(grammarAccess.getMazeGameAccess().getRoomsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getMazeGameAccess().getRoomsAssignment_2()); }
		(rule__MazeGame__RoomsAssignment_2)*
		{ after(grammarAccess.getMazeGameAccess().getRoomsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MazeGame__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MazeGame__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MazeGame__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMazeGameAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getMazeGameAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RoomDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoomDefinition__Group__0__Impl
	rule__RoomDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RoomDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoomDefinitionAccess().getRoomKeyword_0()); }
	'room'
	{ after(grammarAccess.getRoomDefinitionAccess().getRoomKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoomDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoomDefinition__Group__1__Impl
	rule__RoomDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RoomDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoomDefinitionAccess().getNameAssignment_1()); }
	(rule__RoomDefinition__NameAssignment_1)?
	{ after(grammarAccess.getRoomDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoomDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoomDefinition__Group__2__Impl
	rule__RoomDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RoomDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoomDefinitionAccess().getDescriptionAssignment_2()); }
	(rule__RoomDefinition__DescriptionAssignment_2)
	{ after(grammarAccess.getRoomDefinitionAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoomDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoomDefinition__Group__3__Impl
	rule__RoomDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RoomDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoomDefinitionAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getRoomDefinitionAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoomDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoomDefinition__Group__4__Impl
	rule__RoomDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RoomDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoomDefinitionAccess().getDoorsAssignment_4()); }
	(rule__RoomDefinition__DoorsAssignment_4)*
	{ after(grammarAccess.getRoomDefinitionAccess().getDoorsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoomDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoomDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RoomDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoomDefinitionAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getRoomDefinitionAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DoorDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoorDefinition__Group__0__Impl
	rule__DoorDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoorDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoorDefinitionAccess().getDirectionAssignment_0()); }
	(rule__DoorDefinition__DirectionAssignment_0)
	{ after(grammarAccess.getDoorDefinitionAccess().getDirectionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoorDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoorDefinition__Group__1__Impl
	rule__DoorDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoorDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoorDefinitionAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getDoorDefinitionAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoorDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoorDefinition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoorDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoorDefinitionAccess().getAdjacentRoomAssignment_2()); }
	(rule__DoorDefinition__AdjacentRoomAssignment_2)
	{ after(grammarAccess.getDoorDefinitionAccess().getAdjacentRoomAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MazeGame__RoomsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMazeGameAccess().getRoomsRoomDefinitionParserRuleCall_2_0()); }
		ruleRoomDefinition
		{ after(grammarAccess.getMazeGameAccess().getRoomsRoomDefinitionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoomDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoomDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRoomDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoomDefinition__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoomDefinitionAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getRoomDefinitionAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoomDefinition__DoorsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoomDefinitionAccess().getDoorsDoorDefinitionParserRuleCall_4_0()); }
		ruleDoorDefinition
		{ after(grammarAccess.getRoomDefinitionAccess().getDoorsDoorDefinitionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoorDefinition__DirectionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoorDefinitionAccess().getDirectionDirectionEnumRuleCall_0_0()); }
		ruleDirection
		{ after(grammarAccess.getDoorDefinitionAccess().getDirectionDirectionEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoorDefinition__AdjacentRoomAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoorDefinitionAccess().getAdjacentRoomRoomDefinitionCrossReference_2_0()); }
		(
			{ before(grammarAccess.getDoorDefinitionAccess().getAdjacentRoomRoomDefinitionIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getDoorDefinitionAccess().getAdjacentRoomRoomDefinitionIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getDoorDefinitionAccess().getAdjacentRoomRoomDefinitionCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
