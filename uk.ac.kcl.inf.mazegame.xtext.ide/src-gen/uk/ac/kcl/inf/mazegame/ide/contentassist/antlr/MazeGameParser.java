/*
 * generated by Xtext 2.12.0
 */
package uk.ac.kcl.inf.mazegame.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.mazegame.ide.contentassist.antlr.internal.InternalMazeGameParser;
import uk.ac.kcl.inf.mazegame.services.MazeGameGrammarAccess;

public class MazeGameParser extends AbstractContentAssistParser {

	@Inject
	private MazeGameGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMazeGameParser createParser() {
		InternalMazeGameParser result = new InternalMazeGameParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDirectionAccess().getAlternatives(), "rule__Direction__Alternatives");
					put(grammarAccess.getMazeGameAccess().getGroup(), "rule__MazeGame__Group__0");
					put(grammarAccess.getRoomDefinitionAccess().getGroup(), "rule__RoomDefinition__Group__0");
					put(grammarAccess.getDoorDefinitionAccess().getGroup(), "rule__DoorDefinition__Group__0");
					put(grammarAccess.getMazeGameAccess().getRoomsAssignment_2(), "rule__MazeGame__RoomsAssignment_2");
					put(grammarAccess.getRoomDefinitionAccess().getNameAssignment_1(), "rule__RoomDefinition__NameAssignment_1");
					put(grammarAccess.getRoomDefinitionAccess().getDescriptionAssignment_2(), "rule__RoomDefinition__DescriptionAssignment_2");
					put(grammarAccess.getRoomDefinitionAccess().getDoorsAssignment_4(), "rule__RoomDefinition__DoorsAssignment_4");
					put(grammarAccess.getDoorDefinitionAccess().getDirectionAssignment_0(), "rule__DoorDefinition__DirectionAssignment_0");
					put(grammarAccess.getDoorDefinitionAccess().getAdjacentRoomAssignment_2(), "rule__DoorDefinition__AdjacentRoomAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MazeGameGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MazeGameGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
